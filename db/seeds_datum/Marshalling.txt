What is Marshalling?

Marshalling is the process of converting a memory representation of an object into a data format which can be stored or transmitted.  

It is desirable for the converted data format to be of a common or close to universal standard (ie. JSON or XML) such that it can be easily parsed by common “adapters”.  Many languages and frameworks implement the ability to parse JSON for example, and thus it can be used a kind of common protocol for transferring data.

In Ruby, one can use Marshalling to execute deep copies of an object in a simple way.  However, if dealing with relatively simple data structures such as Hashes or Arrays, it is actually faster in Ruby to perform a deep copy using “manual” copying with the Hash & Array classes’ native iterating method #each.


In order to prove this, I recreated Evan Pon’s benchmark test from https://www.appsloveworld.com/ruby/100/20/whats-the-most-efficient-way-to-deep-copy-an-object-in-ruby

Evan used ruby 1.9.2p180, which is several versions old at the time of writing this, so I figured I might as well give it a test myself.

One thing to note is that this particular test is only accounting for Array and Hash objects.  These object types have built in methods in Ruby, which may account for their speed.  Additionally if we are working with more complex object types, the complexity of defining custom rules for handling the nested data structures may end up outweighing the benefits of the improvement in speed, depending on the application.  For the sake of simplicity the Marshal approach may be the most appropriate solution in such contexts where complex (or possibly widely varied) data objects are being handled.  If a middleground is needed, Messagepack can provide a slightly more performant alternative to Marshal, with the tradeoff that we would now be relying on an external package dependency that is not included in the Ruby Standard Library.

```ruby
#!/usr/bin/env ruby
require 'benchmark'
require 'yaml'
require 'json/ext'
require 'msgpack'

def dc1(value)
  Marshal.load(Marshal.dump(value))
end

def dc2(value)
  YAML.load(YAML.dump(value))
end

def dc3(value)
  JSON.load(JSON.dump(value))
end

def dc4(value)
  if value.is_a?(Hash)
    result = value.clone
    value.each{|k, v| result[k] = dc4(v)}
    result
  elsif value.is_a?(Array)
    result = value.clone
    result.clear
    value.each{|v| result << dc4(v)}
    result
  else
    value
  end
end

def dc5(value)
  MessagePack.unpack(value.to_msgpack)
end

value = {'a' => {:x => [1, [nil, 'b'], {'a' => 1}]}, 'b' => ['z']}

Benchmark.bm do |x|
  iterations = 10000
  x.report {iterations.times {dc1(value)}}
  x.report {iterations.times {dc2(value)}}
  x.report {iterations.times {dc3(value)}}
  x.report {iterations.times {dc4(value)}}
  x.report {iterations.times {dc5(value)}}
end
```

results in:

user       system     total       real
0.230000   0.000000   0.230000 (  0.239257)  (Marshal)
3.240000   0.030000   3.270000 (  3.262255)  (YAML) 
0.590000   0.010000   0.600000 (  0.601693)  (JSON)
0.060000   0.000000   0.060000 (  0.067661)  (Custom)
0.090000   0.010000   0.100000 (  0.097705)  (MessagePack)