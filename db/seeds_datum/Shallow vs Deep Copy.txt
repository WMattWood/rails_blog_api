A shallow copy copies only the references to the original values.  This means that any change made to the original is propagated to the shallow copy

A deep copy means that the actual values are copied to new memory locations, and are distinct “copies” of the underlying values.  Any changes made to the original are not propagated to the deep copy, as the deep copy has it’s own version of the original values.

```ruby
# We create an original, and do a shallow + deep copy
001 > original = [ [1, 2, 3], ["floop", "bing"] ]
 => [[1, 2, 3], ["floop", "bing"]] 
002 > dupe = original.dup
 => [[1, 2, 3], ["floop", "bing"]] 
003 > deep = Marshal.load(Marshal.dump(original))
 => [[1, 2, 3], ["floop", "bing"]] 

# Here we see that all three have the same values.
004 > original
 => [[1, 2, 3], ["floop", "bing"]] 
005 > dupe
 => [[1, 2, 3], ["floop", "bing"]] 
006 > deep
 => [[1, 2, 3], ["floop", "bing"]] 

# A change is made to the original
007 > original[1][0] = "cat"
 => "cat" 

# We see the change propagated to the shallow copy, but not the deep copy.
008 > original
 => [[1, 2, 3], ["cat", "bing"]] 
009 > dupe
 => [[1, 2, 3], ["cat", "bing"]] 
010 > deep
 => [[1, 2, 3], ["floop", "bing"]] 
```